Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

Example:

Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].

Solution:

class Solution {
    public int[] twoSum(int[] nums, int target) {
        int[] result = new int[2];
        for(int i=0;i<=nums.length;i++)
        {
            for(int j=i+1;j<=nums.length-1;j++)
            {
                 if(nums[i]+nums[j]==target)
                   {result[0]=i;
                    result[1]=j;}
                     
            }
           
        }
        return result;
    }
}

//Since there are two for loops where we traverse through each item of array through each iteration, time complexity would be O(n*n)
//and since we have not used extra variables or locations, space complexity is O(1).

//To improve this time complexity, the trade off would be compromising space complexity for which Hash maps are good. 
class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer, Integer> map = new HashMap<>();
        for(int i=0;i<nums.length;i++)
        {
            map.put(nums[i],i);
        }
        for(int i=0;i<nums.length;i++)
        {
            int complement = target-nums[i];
            if(map.containsKey(complement) && map.get(complement) !=i)
            {
                return new int[]{ i, map.get(complement)};
            }
        }
        throw new IllegalArgumentException("No two sum solution");
    }
}

//Time complexity : O(n)O(n). We traverse the list containing nn elements exactly twice. Since the hash table reduces the look up time to O(1)O(1), the time complexity is O(n)O(n).

//Space complexity : O(n)O(n). The extra space required depends on the number of items stored in the hash table, which stores exactly nn elements.

// We could improve this even better using Hash Map in one pass by checking if the complement exists is yes, return it, if no add it to the Hash Map.
class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer, Integer> map = new HashMap<>();
        for(int i=0; i<nums.length;i++)
        {
            int complement = target -nums[i];
            if(map.containsKey(complement))
            {
                return new int[] {map.get(complement),i};
            }
            map.put(nums[i],i);
        }
        throw new IllegalArgumentException("No two sum solution");
    }
}
